// source: watch_input.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var common_pb = require('./common_pb');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.ClientInfo', null, global);
goog.exportSymbol('proto.HapticEvent', null, global);
goog.exportSymbol('proto.HapticEvent.HapticType', null, global);
goog.exportSymbol('proto.InputUpdate', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HapticEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.HapticEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HapticEvent.displayName = 'proto.HapticEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ClientInfo.displayName = 'proto.ClientInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InputUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.InputUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.InputUpdate.displayName = 'proto.InputUpdate';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.HapticEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.HapticEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.HapticEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HapticEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    intensity: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    length: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HapticEvent}
 */
proto.HapticEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HapticEvent;
  return proto.HapticEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HapticEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HapticEvent}
 */
proto.HapticEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.HapticEvent.HapticType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setIntensity(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HapticEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.HapticEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HapticEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HapticEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getIntensity();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getLength();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.HapticEvent.HapticType = {
  CANCEL: 0,
  ONESHOT: 1
};

/**
 * optional HapticType type = 1;
 * @return {!proto.HapticEvent.HapticType}
 */
proto.HapticEvent.prototype.getType = function() {
  return /** @type {!proto.HapticEvent.HapticType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.HapticEvent.HapticType} value
 * @return {!proto.HapticEvent} returns this
 */
proto.HapticEvent.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional float intensity = 2;
 * @return {number}
 */
proto.HapticEvent.prototype.getIntensity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.HapticEvent} returns this
 */
proto.HapticEvent.prototype.setIntensity = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional int32 length = 3;
 * @return {number}
 */
proto.HapticEvent.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.HapticEvent} returns this
 */
proto.HapticEvent.prototype.setLength = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    appname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    devicename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    title: jspb.Message.getFieldWithDefault(msg, 3, ""),
    os: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientInfo}
 */
proto.ClientInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientInfo;
  return proto.ClientInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientInfo}
 */
proto.ClientInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevicename(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDevicename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOs();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string appName = 1;
 * @return {string}
 */
proto.ClientInfo.prototype.getAppname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ClientInfo} returns this
 */
proto.ClientInfo.prototype.setAppname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string deviceName = 2;
 * @return {string}
 */
proto.ClientInfo.prototype.getDevicename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ClientInfo} returns this
 */
proto.ClientInfo.prototype.setDevicename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string title = 3;
 * @return {string}
 */
proto.ClientInfo.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ClientInfo} returns this
 */
proto.ClientInfo.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string os = 4;
 * @return {string}
 */
proto.ClientInfo.prototype.getOs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ClientInfo} returns this
 */
proto.ClientInfo.prototype.setOs = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InputUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.InputUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InputUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InputUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    hapticevent: (f = msg.getHapticevent()) && proto.HapticEvent.toObject(includeInstance, f),
    clientinfo: (f = msg.getClientinfo()) && proto.ClientInfo.toObject(includeInstance, f),
    modelrequest: (f = msg.getModelrequest()) && common_pb.Model.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InputUpdate}
 */
proto.InputUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InputUpdate;
  return proto.InputUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InputUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InputUpdate}
 */
proto.InputUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.HapticEvent;
      reader.readMessage(value,proto.HapticEvent.deserializeBinaryFromReader);
      msg.setHapticevent(value);
      break;
    case 2:
      var value = new proto.ClientInfo;
      reader.readMessage(value,proto.ClientInfo.deserializeBinaryFromReader);
      msg.setClientinfo(value);
      break;
    case 3:
      var value = new common_pb.Model;
      reader.readMessage(value,common_pb.Model.deserializeBinaryFromReader);
      msg.setModelrequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InputUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InputUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InputUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InputUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHapticevent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.HapticEvent.serializeBinaryToWriter
    );
  }
  f = message.getClientinfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ClientInfo.serializeBinaryToWriter
    );
  }
  f = message.getModelrequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.Model.serializeBinaryToWriter
    );
  }
};


/**
 * optional HapticEvent hapticEvent = 1;
 * @return {?proto.HapticEvent}
 */
proto.InputUpdate.prototype.getHapticevent = function() {
  return /** @type{?proto.HapticEvent} */ (
    jspb.Message.getWrapperField(this, proto.HapticEvent, 1));
};


/**
 * @param {?proto.HapticEvent|undefined} value
 * @return {!proto.InputUpdate} returns this
*/
proto.InputUpdate.prototype.setHapticevent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.InputUpdate} returns this
 */
proto.InputUpdate.prototype.clearHapticevent = function() {
  return this.setHapticevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.InputUpdate.prototype.hasHapticevent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ClientInfo clientInfo = 2;
 * @return {?proto.ClientInfo}
 */
proto.InputUpdate.prototype.getClientinfo = function() {
  return /** @type{?proto.ClientInfo} */ (
    jspb.Message.getWrapperField(this, proto.ClientInfo, 2));
};


/**
 * @param {?proto.ClientInfo|undefined} value
 * @return {!proto.InputUpdate} returns this
*/
proto.InputUpdate.prototype.setClientinfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.InputUpdate} returns this
 */
proto.InputUpdate.prototype.clearClientinfo = function() {
  return this.setClientinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.InputUpdate.prototype.hasClientinfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Model modelRequest = 3;
 * @return {?proto.Model}
 */
proto.InputUpdate.prototype.getModelrequest = function() {
  return /** @type{?proto.Model} */ (
    jspb.Message.getWrapperField(this, common_pb.Model, 3));
};


/**
 * @param {?proto.Model|undefined} value
 * @return {!proto.InputUpdate} returns this
*/
proto.InputUpdate.prototype.setModelrequest = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.InputUpdate} returns this
 */
proto.InputUpdate.prototype.clearModelrequest = function() {
  return this.setModelrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.InputUpdate.prototype.hasModelrequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto);
