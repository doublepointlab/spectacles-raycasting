// source: watch_output.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var common_pb = require('./common_pb');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.ButtonEvent', null, global);
goog.exportSymbol('proto.Gesture', null, global);
goog.exportSymbol('proto.Gesture.GestureType', null, global);
goog.exportSymbol('proto.Info', null, global);
goog.exportSymbol('proto.Info.Hand', null, global);
goog.exportSymbol('proto.RotaryEvent', null, global);
goog.exportSymbol('proto.SensorFrame', null, global);
goog.exportSymbol('proto.TouchEvent', null, global);
goog.exportSymbol('proto.TouchEvent.TouchEventType', null, global);
goog.exportSymbol('proto.Update', null, global);
goog.exportSymbol('proto.Update.Signal', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Info = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Info.repeatedFields_, null);
};
goog.inherits(proto.Info, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Info.displayName = 'proto.Info';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SensorFrame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SensorFrame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SensorFrame.displayName = 'proto.SensorFrame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Gesture = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Gesture, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Gesture.displayName = 'proto.Gesture';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TouchEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TouchEvent.repeatedFields_, null);
};
goog.inherits(proto.TouchEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TouchEvent.displayName = 'proto.TouchEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RotaryEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RotaryEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RotaryEvent.displayName = 'proto.RotaryEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ButtonEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ButtonEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ButtonEvent.displayName = 'proto.ButtonEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Update = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Update.repeatedFields_, null);
};
goog.inherits(proto.Update, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Update.displayName = 'proto.Update';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Info.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Info.prototype.toObject = function(opt_includeInstance) {
  return proto.Info.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Info} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Info.toObject = function(includeInstance, msg) {
  var f, obj = {
    hand: jspb.Message.getFieldWithDefault(msg, 1, 0),
    appid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    appversion: jspb.Message.getFieldWithDefault(msg, 3, ""),
    availablemodelsList: jspb.Message.toObjectList(msg.getAvailablemodelsList(),
    common_pb.Model.toObject, includeInstance),
    activemodel: (f = msg.getActivemodel()) && common_pb.Model.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Info}
 */
proto.Info.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Info;
  return proto.Info.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Info} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Info}
 */
proto.Info.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Info.Hand} */ (reader.readEnum());
      msg.setHand(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppversion(value);
      break;
    case 4:
      var value = new common_pb.Model;
      reader.readMessage(value,common_pb.Model.deserializeBinaryFromReader);
      msg.addAvailablemodels(value);
      break;
    case 5:
      var value = new common_pb.Model;
      reader.readMessage(value,common_pb.Model.deserializeBinaryFromReader);
      msg.setActivemodel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Info.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Info.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Info} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Info.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHand();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAppid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAppversion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAvailablemodelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      common_pb.Model.serializeBinaryToWriter
    );
  }
  f = message.getActivemodel();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      common_pb.Model.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.Info.Hand = {
  NONE: 0,
  RIGHT: 1,
  LEFT: 2
};

/**
 * optional Hand hand = 1;
 * @return {!proto.Info.Hand}
 */
proto.Info.prototype.getHand = function() {
  return /** @type {!proto.Info.Hand} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Info.Hand} value
 * @return {!proto.Info} returns this
 */
proto.Info.prototype.setHand = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string appId = 2;
 * @return {string}
 */
proto.Info.prototype.getAppid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Info} returns this
 */
proto.Info.prototype.setAppid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string appVersion = 3;
 * @return {string}
 */
proto.Info.prototype.getAppversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Info} returns this
 */
proto.Info.prototype.setAppversion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Model availableModels = 4;
 * @return {!Array<!proto.Model>}
 */
proto.Info.prototype.getAvailablemodelsList = function() {
  return /** @type{!Array<!proto.Model>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Model, 4));
};


/**
 * @param {!Array<!proto.Model>} value
 * @return {!proto.Info} returns this
*/
proto.Info.prototype.setAvailablemodelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Model=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Model}
 */
proto.Info.prototype.addAvailablemodels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Model, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Info} returns this
 */
proto.Info.prototype.clearAvailablemodelsList = function() {
  return this.setAvailablemodelsList([]);
};


/**
 * optional Model activeModel = 5;
 * @return {?proto.Model}
 */
proto.Info.prototype.getActivemodel = function() {
  return /** @type{?proto.Model} */ (
    jspb.Message.getWrapperField(this, common_pb.Model, 5));
};


/**
 * @param {?proto.Model|undefined} value
 * @return {!proto.Info} returns this
*/
proto.Info.prototype.setActivemodel = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Info} returns this
 */
proto.Info.prototype.clearActivemodel = function() {
  return this.setActivemodel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Info.prototype.hasActivemodel = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SensorFrame.prototype.toObject = function(opt_includeInstance) {
  return proto.SensorFrame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SensorFrame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SensorFrame.toObject = function(includeInstance, msg) {
  var f, obj = {
    gyro: (f = msg.getGyro()) && common_pb.Vec3.toObject(includeInstance, f),
    acc: (f = msg.getAcc()) && common_pb.Vec3.toObject(includeInstance, f),
    grav: (f = msg.getGrav()) && common_pb.Vec3.toObject(includeInstance, f),
    quat: (f = msg.getQuat()) && common_pb.Quat.toObject(includeInstance, f),
    mag: (f = msg.getMag()) && common_pb.Vec3.toObject(includeInstance, f),
    magcal: (f = msg.getMagcal()) && common_pb.Vec3.toObject(includeInstance, f),
    deltatime: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SensorFrame}
 */
proto.SensorFrame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SensorFrame;
  return proto.SensorFrame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SensorFrame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SensorFrame}
 */
proto.SensorFrame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Vec3;
      reader.readMessage(value,common_pb.Vec3.deserializeBinaryFromReader);
      msg.setGyro(value);
      break;
    case 2:
      var value = new common_pb.Vec3;
      reader.readMessage(value,common_pb.Vec3.deserializeBinaryFromReader);
      msg.setAcc(value);
      break;
    case 3:
      var value = new common_pb.Vec3;
      reader.readMessage(value,common_pb.Vec3.deserializeBinaryFromReader);
      msg.setGrav(value);
      break;
    case 4:
      var value = new common_pb.Quat;
      reader.readMessage(value,common_pb.Quat.deserializeBinaryFromReader);
      msg.setQuat(value);
      break;
    case 6:
      var value = new common_pb.Vec3;
      reader.readMessage(value,common_pb.Vec3.deserializeBinaryFromReader);
      msg.setMag(value);
      break;
    case 7:
      var value = new common_pb.Vec3;
      reader.readMessage(value,common_pb.Vec3.deserializeBinaryFromReader);
      msg.setMagcal(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeltatime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SensorFrame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SensorFrame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SensorFrame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SensorFrame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGyro();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Vec3.serializeBinaryToWriter
    );
  }
  f = message.getAcc();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Vec3.serializeBinaryToWriter
    );
  }
  f = message.getGrav();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.Vec3.serializeBinaryToWriter
    );
  }
  f = message.getQuat();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_pb.Quat.serializeBinaryToWriter
    );
  }
  f = message.getMag();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      common_pb.Vec3.serializeBinaryToWriter
    );
  }
  f = message.getMagcal();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      common_pb.Vec3.serializeBinaryToWriter
    );
  }
  f = message.getDeltatime();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional Vec3 gyro = 1;
 * @return {?proto.Vec3}
 */
proto.SensorFrame.prototype.getGyro = function() {
  return /** @type{?proto.Vec3} */ (
    jspb.Message.getWrapperField(this, common_pb.Vec3, 1));
};


/**
 * @param {?proto.Vec3|undefined} value
 * @return {!proto.SensorFrame} returns this
*/
proto.SensorFrame.prototype.setGyro = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SensorFrame} returns this
 */
proto.SensorFrame.prototype.clearGyro = function() {
  return this.setGyro(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SensorFrame.prototype.hasGyro = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Vec3 acc = 2;
 * @return {?proto.Vec3}
 */
proto.SensorFrame.prototype.getAcc = function() {
  return /** @type{?proto.Vec3} */ (
    jspb.Message.getWrapperField(this, common_pb.Vec3, 2));
};


/**
 * @param {?proto.Vec3|undefined} value
 * @return {!proto.SensorFrame} returns this
*/
proto.SensorFrame.prototype.setAcc = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SensorFrame} returns this
 */
proto.SensorFrame.prototype.clearAcc = function() {
  return this.setAcc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SensorFrame.prototype.hasAcc = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Vec3 grav = 3;
 * @return {?proto.Vec3}
 */
proto.SensorFrame.prototype.getGrav = function() {
  return /** @type{?proto.Vec3} */ (
    jspb.Message.getWrapperField(this, common_pb.Vec3, 3));
};


/**
 * @param {?proto.Vec3|undefined} value
 * @return {!proto.SensorFrame} returns this
*/
proto.SensorFrame.prototype.setGrav = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SensorFrame} returns this
 */
proto.SensorFrame.prototype.clearGrav = function() {
  return this.setGrav(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SensorFrame.prototype.hasGrav = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Quat quat = 4;
 * @return {?proto.Quat}
 */
proto.SensorFrame.prototype.getQuat = function() {
  return /** @type{?proto.Quat} */ (
    jspb.Message.getWrapperField(this, common_pb.Quat, 4));
};


/**
 * @param {?proto.Quat|undefined} value
 * @return {!proto.SensorFrame} returns this
*/
proto.SensorFrame.prototype.setQuat = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SensorFrame} returns this
 */
proto.SensorFrame.prototype.clearQuat = function() {
  return this.setQuat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SensorFrame.prototype.hasQuat = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Vec3 mag = 6;
 * @return {?proto.Vec3}
 */
proto.SensorFrame.prototype.getMag = function() {
  return /** @type{?proto.Vec3} */ (
    jspb.Message.getWrapperField(this, common_pb.Vec3, 6));
};


/**
 * @param {?proto.Vec3|undefined} value
 * @return {!proto.SensorFrame} returns this
*/
proto.SensorFrame.prototype.setMag = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SensorFrame} returns this
 */
proto.SensorFrame.prototype.clearMag = function() {
  return this.setMag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SensorFrame.prototype.hasMag = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Vec3 magCal = 7;
 * @return {?proto.Vec3}
 */
proto.SensorFrame.prototype.getMagcal = function() {
  return /** @type{?proto.Vec3} */ (
    jspb.Message.getWrapperField(this, common_pb.Vec3, 7));
};


/**
 * @param {?proto.Vec3|undefined} value
 * @return {!proto.SensorFrame} returns this
*/
proto.SensorFrame.prototype.setMagcal = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SensorFrame} returns this
 */
proto.SensorFrame.prototype.clearMagcal = function() {
  return this.setMagcal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SensorFrame.prototype.hasMagcal = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int32 deltaTime = 5;
 * @return {number}
 */
proto.SensorFrame.prototype.getDeltatime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.SensorFrame} returns this
 */
proto.SensorFrame.prototype.setDeltatime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Gesture.prototype.toObject = function(opt_includeInstance) {
  return proto.Gesture.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Gesture} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Gesture.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deltatime: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Gesture}
 */
proto.Gesture.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Gesture;
  return proto.Gesture.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Gesture} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Gesture}
 */
proto.Gesture.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Gesture.GestureType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeltatime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Gesture.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Gesture.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Gesture} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Gesture.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDeltatime();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Gesture.GestureType = {
  NONE: 0,
  PINCH_TAP: 1,
  CLENCH: 2,
  SURFACE_TAP: 3
};

/**
 * optional GestureType type = 1;
 * @return {!proto.Gesture.GestureType}
 */
proto.Gesture.prototype.getType = function() {
  return /** @type {!proto.Gesture.GestureType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Gesture.GestureType} value
 * @return {!proto.Gesture} returns this
 */
proto.Gesture.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 deltaTime = 2;
 * @return {number}
 */
proto.Gesture.prototype.getDeltatime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Gesture} returns this
 */
proto.Gesture.prototype.setDeltatime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TouchEvent.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TouchEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.TouchEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TouchEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TouchEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    actionindex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pointeridsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    coordsList: jspb.Message.toObjectList(msg.getCoordsList(),
    common_pb.Vec2.toObject, includeInstance),
    deltatime: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TouchEvent}
 */
proto.TouchEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TouchEvent;
  return proto.TouchEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TouchEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TouchEvent}
 */
proto.TouchEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.TouchEvent.TouchEventType} */ (reader.readEnum());
      msg.setEventtype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActionindex(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPointerids(values[i]);
      }
      break;
    case 4:
      var value = new common_pb.Vec2;
      reader.readMessage(value,common_pb.Vec2.deserializeBinaryFromReader);
      msg.addCoords(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeltatime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TouchEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TouchEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TouchEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TouchEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getActionindex();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPointeridsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      3,
      f
    );
  }
  f = message.getCoordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      common_pb.Vec2.serializeBinaryToWriter
    );
  }
  f = message.getDeltatime();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.TouchEvent.TouchEventType = {
  NONE: 0,
  BEGIN: 1,
  END: 2,
  MOVE: 3,
  CANCEL: 4
};

/**
 * optional TouchEventType eventType = 1;
 * @return {!proto.TouchEvent.TouchEventType}
 */
proto.TouchEvent.prototype.getEventtype = function() {
  return /** @type {!proto.TouchEvent.TouchEventType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.TouchEvent.TouchEventType} value
 * @return {!proto.TouchEvent} returns this
 */
proto.TouchEvent.prototype.setEventtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 actionIndex = 2;
 * @return {number}
 */
proto.TouchEvent.prototype.getActionindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.TouchEvent} returns this
 */
proto.TouchEvent.prototype.setActionindex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated int32 pointerIds = 3;
 * @return {!Array<number>}
 */
proto.TouchEvent.prototype.getPointeridsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.TouchEvent} returns this
 */
proto.TouchEvent.prototype.setPointeridsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.TouchEvent} returns this
 */
proto.TouchEvent.prototype.addPointerids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TouchEvent} returns this
 */
proto.TouchEvent.prototype.clearPointeridsList = function() {
  return this.setPointeridsList([]);
};


/**
 * repeated Vec2 coords = 4;
 * @return {!Array<!proto.Vec2>}
 */
proto.TouchEvent.prototype.getCoordsList = function() {
  return /** @type{!Array<!proto.Vec2>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Vec2, 4));
};


/**
 * @param {!Array<!proto.Vec2>} value
 * @return {!proto.TouchEvent} returns this
*/
proto.TouchEvent.prototype.setCoordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Vec2=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Vec2}
 */
proto.TouchEvent.prototype.addCoords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Vec2, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TouchEvent} returns this
 */
proto.TouchEvent.prototype.clearCoordsList = function() {
  return this.setCoordsList([]);
};


/**
 * optional int32 deltaTime = 5;
 * @return {number}
 */
proto.TouchEvent.prototype.getDeltatime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.TouchEvent} returns this
 */
proto.TouchEvent.prototype.setDeltatime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RotaryEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.RotaryEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RotaryEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RotaryEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    step: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deltatime: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RotaryEvent}
 */
proto.RotaryEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RotaryEvent;
  return proto.RotaryEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RotaryEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RotaryEvent}
 */
proto.RotaryEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStep(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeltatime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RotaryEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RotaryEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RotaryEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RotaryEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStep();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDeltatime();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 step = 1;
 * @return {number}
 */
proto.RotaryEvent.prototype.getStep = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.RotaryEvent} returns this
 */
proto.RotaryEvent.prototype.setStep = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 deltaTime = 2;
 * @return {number}
 */
proto.RotaryEvent.prototype.getDeltatime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.RotaryEvent} returns this
 */
proto.RotaryEvent.prototype.setDeltatime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ButtonEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.ButtonEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ButtonEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ButtonEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deltatime: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ButtonEvent}
 */
proto.ButtonEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ButtonEvent;
  return proto.ButtonEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ButtonEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ButtonEvent}
 */
proto.ButtonEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeltatime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ButtonEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ButtonEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ButtonEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ButtonEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDeltatime();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.ButtonEvent.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ButtonEvent} returns this
 */
proto.ButtonEvent.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 deltaTime = 2;
 * @return {number}
 */
proto.ButtonEvent.prototype.getDeltatime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ButtonEvent} returns this
 */
proto.ButtonEvent.prototype.setDeltatime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Update.repeatedFields_ = [1,2,3,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Update.prototype.toObject = function(opt_includeInstance) {
  return proto.Update.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Update} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Update.toObject = function(includeInstance, msg) {
  var f, obj = {
    sensorframesList: jspb.Message.toObjectList(msg.getSensorframesList(),
    proto.SensorFrame.toObject, includeInstance),
    gesturesList: jspb.Message.toObjectList(msg.getGesturesList(),
    proto.Gesture.toObject, includeInstance),
    toucheventsList: jspb.Message.toObjectList(msg.getToucheventsList(),
    proto.TouchEvent.toObject, includeInstance),
    buttoneventsList: jspb.Message.toObjectList(msg.getButtoneventsList(),
    proto.ButtonEvent.toObject, includeInstance),
    rotaryeventsList: jspb.Message.toObjectList(msg.getRotaryeventsList(),
    proto.RotaryEvent.toObject, includeInstance),
    signalsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    deltatime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    unixtime: jspb.Message.getFieldWithDefault(msg, 8, 0),
    info: (f = msg.getInfo()) && proto.Info.toObject(includeInstance, f),
    pressure: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Update}
 */
proto.Update.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Update;
  return proto.Update.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Update} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Update}
 */
proto.Update.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SensorFrame;
      reader.readMessage(value,proto.SensorFrame.deserializeBinaryFromReader);
      msg.addSensorframes(value);
      break;
    case 2:
      var value = new proto.Gesture;
      reader.readMessage(value,proto.Gesture.deserializeBinaryFromReader);
      msg.addGestures(value);
      break;
    case 3:
      var value = new proto.TouchEvent;
      reader.readMessage(value,proto.TouchEvent.deserializeBinaryFromReader);
      msg.addTouchevents(value);
      break;
    case 4:
      var value = new proto.ButtonEvent;
      reader.readMessage(value,proto.ButtonEvent.deserializeBinaryFromReader);
      msg.addButtonevents(value);
      break;
    case 5:
      var value = new proto.RotaryEvent;
      reader.readMessage(value,proto.RotaryEvent.deserializeBinaryFromReader);
      msg.addRotaryevents(value);
      break;
    case 6:
      var values = /** @type {!Array<!proto.Update.Signal>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSignals(values[i]);
      }
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeltatime(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUnixtime(value);
      break;
    case 9:
      var value = new proto.Info;
      reader.readMessage(value,proto.Info.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPressure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Update.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Update.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Update} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Update.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSensorframesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.SensorFrame.serializeBinaryToWriter
    );
  }
  f = message.getGesturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Gesture.serializeBinaryToWriter
    );
  }
  f = message.getToucheventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.TouchEvent.serializeBinaryToWriter
    );
  }
  f = message.getButtoneventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.ButtonEvent.serializeBinaryToWriter
    );
  }
  f = message.getRotaryeventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.RotaryEvent.serializeBinaryToWriter
    );
  }
  f = message.getSignalsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      6,
      f
    );
  }
  f = message.getDeltatime();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getUnixtime();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.Info.serializeBinaryToWriter
    );
  }
  f = message.getPressure();
  if (f !== 0.0) {
    writer.writeFloat(
      16,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Update.Signal = {
  NONE: 0,
  DISCONNECT: 1,
  CONNECT_APPROVED: 2,
  DESCRIPTION_UPDATE: 3
};

/**
 * repeated SensorFrame sensorFrames = 1;
 * @return {!Array<!proto.SensorFrame>}
 */
proto.Update.prototype.getSensorframesList = function() {
  return /** @type{!Array<!proto.SensorFrame>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SensorFrame, 1));
};


/**
 * @param {!Array<!proto.SensorFrame>} value
 * @return {!proto.Update} returns this
*/
proto.Update.prototype.setSensorframesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SensorFrame=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SensorFrame}
 */
proto.Update.prototype.addSensorframes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SensorFrame, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Update} returns this
 */
proto.Update.prototype.clearSensorframesList = function() {
  return this.setSensorframesList([]);
};


/**
 * repeated Gesture gestures = 2;
 * @return {!Array<!proto.Gesture>}
 */
proto.Update.prototype.getGesturesList = function() {
  return /** @type{!Array<!proto.Gesture>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Gesture, 2));
};


/**
 * @param {!Array<!proto.Gesture>} value
 * @return {!proto.Update} returns this
*/
proto.Update.prototype.setGesturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Gesture=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Gesture}
 */
proto.Update.prototype.addGestures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Gesture, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Update} returns this
 */
proto.Update.prototype.clearGesturesList = function() {
  return this.setGesturesList([]);
};


/**
 * repeated TouchEvent touchEvents = 3;
 * @return {!Array<!proto.TouchEvent>}
 */
proto.Update.prototype.getToucheventsList = function() {
  return /** @type{!Array<!proto.TouchEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TouchEvent, 3));
};


/**
 * @param {!Array<!proto.TouchEvent>} value
 * @return {!proto.Update} returns this
*/
proto.Update.prototype.setToucheventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.TouchEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TouchEvent}
 */
proto.Update.prototype.addTouchevents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.TouchEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Update} returns this
 */
proto.Update.prototype.clearToucheventsList = function() {
  return this.setToucheventsList([]);
};


/**
 * repeated ButtonEvent buttonEvents = 4;
 * @return {!Array<!proto.ButtonEvent>}
 */
proto.Update.prototype.getButtoneventsList = function() {
  return /** @type{!Array<!proto.ButtonEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ButtonEvent, 4));
};


/**
 * @param {!Array<!proto.ButtonEvent>} value
 * @return {!proto.Update} returns this
*/
proto.Update.prototype.setButtoneventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.ButtonEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ButtonEvent}
 */
proto.Update.prototype.addButtonevents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.ButtonEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Update} returns this
 */
proto.Update.prototype.clearButtoneventsList = function() {
  return this.setButtoneventsList([]);
};


/**
 * repeated RotaryEvent rotaryEvents = 5;
 * @return {!Array<!proto.RotaryEvent>}
 */
proto.Update.prototype.getRotaryeventsList = function() {
  return /** @type{!Array<!proto.RotaryEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RotaryEvent, 5));
};


/**
 * @param {!Array<!proto.RotaryEvent>} value
 * @return {!proto.Update} returns this
*/
proto.Update.prototype.setRotaryeventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.RotaryEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RotaryEvent}
 */
proto.Update.prototype.addRotaryevents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.RotaryEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Update} returns this
 */
proto.Update.prototype.clearRotaryeventsList = function() {
  return this.setRotaryeventsList([]);
};


/**
 * repeated Signal signals = 6;
 * @return {!Array<!proto.Update.Signal>}
 */
proto.Update.prototype.getSignalsList = function() {
  return /** @type {!Array<!proto.Update.Signal>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<!proto.Update.Signal>} value
 * @return {!proto.Update} returns this
 */
proto.Update.prototype.setSignalsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!proto.Update.Signal} value
 * @param {number=} opt_index
 * @return {!proto.Update} returns this
 */
proto.Update.prototype.addSignals = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Update} returns this
 */
proto.Update.prototype.clearSignalsList = function() {
  return this.setSignalsList([]);
};


/**
 * optional int32 deltaTime = 7;
 * @return {number}
 */
proto.Update.prototype.getDeltatime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Update} returns this
 */
proto.Update.prototype.setDeltatime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 unixTime = 8;
 * @return {number}
 */
proto.Update.prototype.getUnixtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.Update} returns this
 */
proto.Update.prototype.setUnixtime = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional Info info = 9;
 * @return {?proto.Info}
 */
proto.Update.prototype.getInfo = function() {
  return /** @type{?proto.Info} */ (
    jspb.Message.getWrapperField(this, proto.Info, 9));
};


/**
 * @param {?proto.Info|undefined} value
 * @return {!proto.Update} returns this
*/
proto.Update.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Update} returns this
 */
proto.Update.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Update.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional float pressure = 16;
 * @return {number}
 */
proto.Update.prototype.getPressure = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Update} returns this
 */
proto.Update.prototype.setPressure = function(value) {
  return jspb.Message.setProto3FloatField(this, 16, value);
};


goog.object.extend(exports, proto);
